top_three_books <- books[c(1,2,3)] #filters the top three books within the 'books' vector
print(top_three_books)
book_reviews <- paste(books, "is a great read!") #attaches "is a great read!" to the end of all the book titles
print (book_reviews)
#a function that uses the inputs 'book_titles' and 'index_numbers' to get an output of the removal of whatever book specified as the index number.
remove_book <- function(book_titles, index_numbers) {
book_titles[-index_numbers]
}
books_without_four <- remove_book(books[], 4) #a variable to show the removal of the fourth book from the 'books' vector.
print(books_without_four)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c(waffles, eggs, fruit)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c(waffles, eggs, fruit)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("waffles", "eggs", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("turkey wraps", "pasta salad", "diet coke")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
print(meals)
$my_breakfast
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast = "waffles, eggs, fruit", my_lunch = "turkey wraps, pasta salad, diet coke"
print(meals)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = "waffles, eggs, fruit", lunch = "turkey wraps, pasta salad, diet coke"
print(meals)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = "waffles, eggs, fruit", lunch = "turkey wraps, pasta salad, diet coke"
print(meals)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = "waffles, eggs, fruit", lunch = "turkey wraps, pasta salad, diet coke")
print(meals)
# Add a "dinner" element to your `meals`` list that has what you plan to eat
# for dinner
meals$dinner <- c(pesto pasta, salad,)
# Add a "dinner" element to your `meals`` list that has what you plan to eat
# for dinner
meals$dinner <- c("pesto pasta", "salad")
print(meals)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals_$dinner <- meals
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals_$dinner <- "pesto pasta", "salad"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals_$dinner <- "dinner"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals$dinner <- "dinner"
print (meals$dinner)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1, 2]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1, 5]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:5]
print(early_meals)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("waffles", "eggs", "fruit")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("waffles", "eggs", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("turkey wraps", "pasta salad", "diet coke")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = "waffles, eggs, fruit", lunch = "turkey wraps, pasta salad, diet coke")
print(meals)
# Add a "dinner" element to your `meals`` list that has what you plan to eat
# for dinner
meals$dinner <- c("pesto pasta", "salad")
print(meals)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
print(dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[[2]]
meals[5]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:5]
print(early_meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals([1], [5])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1,5])
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("waffles", "eggs", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("turkey wraps", "pasta salad", "diet coke")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = "waffles, eggs, fruit", lunch = "turkey wraps, pasta salad, diet coke")
print(meals)
# Add a "dinner" element to your `meals`` list that has what you plan to eat
# for dinner
meals$dinner <- c("pesto pasta", "salad")
print(meals)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
print(dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[[2]]
meals[5]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1])
print(early_meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1], [5])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1, 5])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1], meals [5])
print(early_meals)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- c("Employee 1":"Employee 100")
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- c(paste(Employee, 1:100))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- paste("employee", 1:100)
print(employee)
install.packages('iris')
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, min = 40000, max = 50000)
print(salaries_2017)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, min = -5000, max = 10000)
print(salaries_2018)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
print(salaries)
view(iris)
View(iris)
# Select all values of data frame for Sepal.length
iris$Sepal.Length
# Select only rows of Virginica flowers
iris[iris$Species == 'virginica']
# Select only rows of Virginica flowers
iris[iris$Species == 'virginica', ]
# Select only rows of Virginica flowers
virginica <- iris[iris$Species == 'virginica', ]
# Select only the sepal legnth of the Virginica flowers
virginica$Sepal.Length
# Select rows where Petal.Length > 4.0
petal_length <- iris$Petal.Length > 4.0
# Select rows where Petal.Length > 4.0
petal_length <- iris[iris$Petal.Length > 4.0]
# Select rows where Petal.Length > 4.0
iris[iris$Petal.Length > 4.0]
# Select rows where Petal.Length > 4.0
iris[iris$Petal.Length > 4.0, ]
# Add a column to the dataframe indicating whether Petal.Length > 4.0
iris$is_greater <- iris$Petal.Length > 4.0
# Find the species type of the flower that has the longest Sepal length
iris[iris$Sepal.Length == max(iris$Sepal.Length), ]$Species
# Select rows where species type is 'setosa' and Sepal.Width > 3.0
(iris$Species == 'setosa') & (iris$Sepal.Width > 3.0), ]
# Select rows where species type is 'setosa' and Sepal.Width > 3.0
(iris[($Species == 'setosa') & (iris$Sepal.Width > 3.0), ])
# Select rows where species type is 'setosa' and Sepal.Width > 3.0
(iris[(iris$Species == 'setosa') & (iris$Sepal.Width > 3.0), ])
print(change_salaries)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
change_salaries <- salaries_2017 - salaries_2018
print(change_salaries)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- paste("employee", 1:100)
print(employee)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, min = 40000, max = 50000)
print(salaries_2017)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, min = -5000, max = 10000)
print(salaries_2018)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
print(salaries)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
change_salaries <- salaries_2017 - salaries_2018
print(change_salaries)
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
change_salaries <- salaries_2017 - salaries_2018
print(change_salaries)
salaries <- data.frame(employee, salaries_2017, salaries_2018, change_salaries, stringsAsFactors = FALSE)
print(salaries)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_exp <- data.frame(USPersonalExpenditure)
View(us_exp)
# What are the column names of your dataframe?
colnames(us_exp)
# What are the row names of your dataframe?
row.names(us_exp)
# Add a column "category" to your data frame that contains the rownames
us_exp$category <- rownames(us_exp)
us_exp
# How much money was spent on personal care in 1940?
us_exp["Food and Tobacco", "X1960"]
# How much money was spent on personal care in 1940?
us_exp["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
us_exp["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
us_exp$X1960 == max(us_exp$X1960)
us_exp[us_exp$X1960 == max(us_exp$X1960), "category"]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
year_string <- paste0('X', year)
us_exp[ us_exp[[year_string]] == min(us_exp[[year_string]]), "category"]
}
lowest_category("1940")
us_exp[us_exp[[year_string]] == min(us_exp)[[year_string]]), "category"]
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category <- function(year){
year_string <- paste0(sapply('X', year))
us_exp[us_exp[[year_string]] == min(us_exp)[[year_string]]), "category"]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category <- function(year){
year_string <- paste0(sapply('X', year))
us_exp[us_exp[[year_string]] == min(us_exp[[year_string]]), "category"]
}
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grant <- read.csv('data/gates_money.csv')
# Use the View function to look at the loaded data
View(grants)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grant <- read.csv('data/gates_money.csv')
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
View(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
print(makes)
install.packages(dplyr)
install.packages(dplyr)
install.packages("dplyr")
any_drinking <- read.csv("data/any_drinking.csv", stringsAsFactors = FALSE)
life_expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
any_drinking <- read.csv("data/any_drinking.csv", stringsAsFactors = FALSE)
View(any_drinking)
read.csv('data/any_drinking.csv')
read.csv('data/any_drinking.csv')
life_expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
View(life_expectancy)
life_expectancy$change <- (life_expectancy$le_2013 - life_expectancy$le_1960)
small_gain <- (life_expectancy$change < 5)
num_small_gain <- length(small_gain[small_gain == "TRUE"])
print(num_small_gain)
most_improved <- life_expectancy$country[life_expectancy$change == max(life_expectancy$change)]
print(most_improved)
country_change <- function(country){
same <- life_expectancy[life_expectancy$country == country, 'change']
return(same)
}
paste(country_change('Haiti'))
lowest_life_exp_in_region <- function(region){
low_life <- min(life_expectancy[life_expectancy$region == region, 'le_2013'])
name_of_country <- life_expectancy[life_expectancy$le_2013 == low_life, 'country']
return(name_of_country)
}
paste(lowest_life_exp_in_region("Latin America & Caribbean"))
names <- c("Michelle Ho", "Patricia Au", "Anukriti Goyal", "Andrew Kan", "Bao Dinh", "Kishore Vasan")
math_grades <- c(95, 85, 90, 99, 80, 100)
spanish_grades <- c(75, 80, 90, 85, 70, 93)
tas <- data.frame(names, math_grades, spanish_grades, stringsAsFactors = FALSE)
print(tas)
x <- nrow(tas)
y <- ncol(tas)
col_names <- colnames(tas)
paste("The TA data frame has ", x, "rows and ", y, "cols: ", paste(col_names, collapse = ", "))
row_names <- rownames(tas)
tas[2, ]
tas$grade_diff <- math_grades - spanish_grades
tas$better_at_math <- (tas$grade_diff > 0)
num_better_at_math <- tas[tas$better_at_math == TRUE, "better_at_math"]
NROW(num_better_at_math)
rownames(tas) = NULL;
write.csv(file = "data/grade_data.csv", tas)
life_expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
any_drinking <- read.csv('data/any_drinking.csv', stringsAsFactors = FALSE)
any_drinking <- read.csv('desktop/"info 201"/data/any_drinking.csv', stringsAsFactors = FALSE)
View(any_drinking)
#################
#### PART 1 #####
#################
any_drinking <- read.csv('data/any_drinking.csv', stringsAsFactors = FALSE)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
#install.packages("ggplot2")
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y= price, color = clarity))
source('~/Desktop/info 201/a7-collaboration-raylzhao/erica_script.R')
source('~/Desktop/info 201/a7-collaboration-raylzhao/erica_script.R')
setwd("~/Desktop/info 201/a7-collaboration-raylzhao")
source('~/Desktop/info 201/a7-collaboration-raylzhao/erica_script.R')
setwd("~/Desktop/info 201/a7-collaboration-raylzhao")
```{r setup, include=FALSE}
source("erica_script.R")
install.packages('shiny')
library("shiny")
library("ggplot2")
library("dplyr")
library("shiny")
install.packages('shiny')
library("shiny")
ui <- fluidPage(
titlePanel("Eviction Dataset"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
)
)
) #end of fluidpage
library("ggplot2")
library("dplyr")
install.packages('shiny')
library("shiny")
install.packages("sourcetools", type = "source")
install.packages('shiny')
library("shiny")
install.packages('sourcetools', repos='http://cran.us.r-project.org')
install.packages('shiny')
install.packages("httpuv")
install.packages('shiny')
library("shiny")
sudo su - \
  -c "R -e \"install.packages('shiny', repos='http://cran.rstudio.com/')\""
install.packages("shiny", dep=TRUE)
library("shiny")
install.packages("shiny", dep=TRUE)
install.packages("httpuv")
install.packages('shiny')
install.packages("httpuv")
install.packages("httpuv")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("httpuv")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("httpuv")
install.packages('shiny')
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("httpuv")
install.packages("httpuv")
install.packages('shiny')
install.packages('shiny')
install.packages("httpuv")
install.packages('shiny')
install.packages('shiny')
install.packages('shiny')
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("httpuv")
install.packages('shiny')
library("shiny")
shiny::runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
runApp('Desktop/info 201/a8-data-app-es1231')
government_info <- read.csv('government_type_data.csv', stringsAsFactors = FALSE)
government_info <- read.csv('government_type_data', stringsAsFactors = FALSE)
setwd("~/Desktop/info 201/final-project-sear")
happiness_info <- read.csv('2016.csv', stringsAsFactors = FALSE)
government_info <- read.csv('government_type_data', stringsAsFactors = FALSE)
government_info <- read.csv('government_type_data', stringsAsFactors = FALSE)
government_info <- read.csv('government_type_data.csv', stringsAsFactors = FALSE)
View(government_info)
happiness_info <- read.csv('2016.csv', stringsAsFactors = FALSE)
government_info <- read.csv('government_type_data.csv', stringsAsFactors = FALSE)
View(happiness_info)
View(government_info)
happiness_info <- read.csv('2016.csv', stringsAsFactors = FALSE)
government_info <- read.csv('government_type_data.csv', stringsAsFactors = FALSE)
View(government_info)
#merge two dataframes together
happiness_info2 <- left_join(happiness_info, government_info)
library("shiny")
library("dplyr")
library("ggplot2")
#merge two dataframes together
happiness_info2 <- left_join(happiness_info, government_info)
View(happiness_info2)
#merge two dataframes together
happiness_info <- left_join(happiness_info, government_info)
View(happiness_info)
