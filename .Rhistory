p("It is", strong("SUPER"), "nice to meet you!"),
textInput("user_name", label = "What is your name?"),
sliderInput('slide_key', label = "Pick a number",
min = 0, max = 20, value = 10),
textOutput("my_message")
)
my_server <- function(input, output) {
# use values from 'input' list
# assign values to 'output' list
output$message <- renderText({
my_message <- paste("Hello", input$user_name)
my_message #return my_message
})
}
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(
h1("Hello Shiny"),
p("It is", strong("SUPER"), "nice to meet you!"),
textInput("user_name", label = "What is your name?"),
sliderInput('slide_key', label = "Pick a number",
min = 0, max = 20, value = 10),
textOutput("message")
)
my_server <- function(input, output) {
# use values from 'input' list
# assign values to 'output' list
output$message <- renderText({
my_message <- paste("Hello", input$user_name)
my_message #return my_message
})
}
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(
h1("Hello Shiny"),
p("It is", strong("SUPER"), "nice to meet you!"),
textInput("user_name", label = "What is your name?"),
sliderInput('slide_key', label = "Pick a number",
min = 0, max = 20, value = 10),
textOutput("message")
)
my_server <- function(input, output) {
# use values from 'input' list
# assign values to 'output' list
output$message <- renderText({
if(input$user_name == "") {
return("")
}
my_message <- paste("Hello", input$user_name)
my_message #return my_message
})
}
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(
sliderInput('num', label = "How many numbers",
min = 1, max = 100, value = 50),
plotOutput('hist'),
verbatimTextOutput('counts')
)
my_server <- function(input, output) {
uniform_nums <- reactive({
the_random_numbers <- runif(input$num, 1, 10) #random 1-10
the_randmo_numbers # return
})
# render a histogram
output$hist <- renderPlot({
hist(uniform_nums()) #return plot
})
output$counts <- renderPrint({
counts <- factor(cut(uniform_nums, breaks = 1:10)) # factor
summary(counts) #return simple vector of counts
})
}
shinyApp(ui = my_ui, server = my_server)
my_server <- function(input, output) {
uniform_nums <- reactive({
the_random_numbers <- runif(input$num, 1, 10) #random 1-10
the_random_numbers # return
})
# render a histogram
output$hist <- renderPlot({
hist(uniform_nums()) #return plot
})
output$counts <- renderPrint({
counts <- factor(cut(uniform_nums, breaks = 1:10)) # factor
summary(counts) #return simple vector of counts
})
}
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(
sliderInput('num', label = "How many numbers",
min = 1, max = 100, value = 50),
plotOutput('hist'),
verbatimTextOutput('counts')
)
my_server <- function(input, output) {
uniform_nums <- reactive({
the_random_numbers <- runif(input$num, 0, 10) #random 1-10
the_random_numbers # return
})
# render a histogram
output$hist <- renderPlot({
hist(uniform_nums(), breaks = 10) #return plot
})
output$counts <- renderPrint({
counts <- factor(cut(uniform_nums, breaks = 1:10)) # factor
summary(counts) #return simple vector of counts
})
}
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(
sliderInput('num', label = "How many numbers",
min = 1, max = 100, value = 50),
plotOutput('hist'),
verbatimTextOutput('counts')
)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='raylzhao',
token='601880722F3E31850F031E9BCA53466D',
secret='<mango1>')
rsconnect::setAccountInfo(name='raylzhao',
token='601880722F3E31850F031E9BCA53466D',
secret='lxWX6WIufh6I0uRI0v6ZsG5MOv07LamvamT2spWB')
output$counts <- renderPrint({
counts <- factor(cut(uniform_nums, breaks = 0:10)) # factor
summary(counts) #return simple vector of counts
})
the_random_numbers <- runif(input$num, 1, 10) #random 1-10
my_server <- function(input, output) {
uniform_nums <- reactive({
the_random_numbers <- runif(input$num, 1, 10) #random 1-10
the_random_numbers # return
})
# render a histogram
output$hist <- renderPlot({
hist(uniform_nums(), breaks = 10) #return plot
})
output$counts <- renderPrint({
counts <- factor(cut(uniform_nums, breaks = 1:10)) # factor
summary(counts) #return simple vector of counts
})
}
shinyApp(ui = my_ui, server = my_server)
my_server <- function(input, output) {
uniform_nums <- reactive({
the_random_numbers <- runif(input$num, 1, 10) #random 1-10
the_random_numbers # return
})
# render a histogram
output$hist <- renderPlot({
hist(uniform_nums(), breaks = 10) #return plot
})
output$counts <- renderPrint({
counts <- factor(cut(uniform_nums, breaks = 1:10)) # factor
summary(as.numeric(counts)) #return simple vector of counts
})
}
shinyApp(ui = my_ui, server = my_server)
setwd("~/Desktop/a7-collaboration-raylzhao")
setwd("~/Desktop/a7-collaboration-raylzhao")
source("data/intro_survey.csv")
source("data/intro_survey.csv")
source(file = "data/intro_survey.csv")
read.csv(file = "data/intro_survey.csv", stringsAsFactors = FALSE)
data <- read.csv(file = "data/intro_survey.csv", stringsAsFactors = FALSE)
View(data)
source(Data_Source.R)
setwd("~/Desktop/a7-collaboration-raylzhao")
source(Data_Source.R)
source("Data_Source.R"")
data <- read.csv(file = "data/intro_survey.csv", stringsAsFactors = FALSE)
data <- read.csv(file = "data/intro_survey.csv", stringsAsFactors = FALSE)
data <- read.csv(file = "data/intro_survey.csv", stringsAsFactors = FALSE)
data <- read.csv(file = "data/intro_survey.csv", stringsAsFactors = FALSE)
colnames(data)
View(data)
programming_data <- select(data, programming_exp)
library("dplyr")
library("httr")
library("jsonlite")
library("rmarkdown")
library("knitr")
library("ggplot2")
library("plotly")
library("tidyr")
programming_data <- select(data, programming_exp)
View(Programming_data)
View(programming_data)
ggplot(data = data) +
geom_line(mapping = aes(x = programming_exp))
ggplot(data = data) +
geom_line(mapping = aes(x = programming_exp, y = r_exp))
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = r_exp))
program_1 <- select(data, programming_exp) %>%
filter(programming_exp == 1)
View(program_1)
program_1 <- select(data, programming_exp) %>%
filter(programming_exp == 1) %>%
nrows()
program_1 <- select(data, programming_exp) %>%
filter(programming_exp == 1) %>%
nrows()
program_1 <- select(data, programming_exp) %>%
filter(programming_exp == 1)
program_1 <- nrows(program_1)
program_1 <- nrow(program_1)
program_1 <- select(data, programming_exp) %>%
filter(programming_exp == 1) %>%
nrow()
program_1 <- select(data, programming_exp) %>%
filter(programming_exp == 1) %>%
nrow()
program_1
program_1 <- select(data, programming_exp) %>%
filter(programming_exp == 1) %>%
nrow()
program_2 <- select(data, programming_exp) %>%
filter(programming_exp == 2) %>%
nrow()
program_3 <- select(data, programming_exp) %>%
filter(programming_exp == 3) %>%
nrow()
program_4 <- select(data, programming_exp) %>%
filter(programming_exp == 4) %>%
nrow()
program_5 <- select(data, programming_exp) %>%
filter(programming_exp == 5) %>%
nrow()
r_exp_1 <- select(data, r_exp) %>%
filter(r_exp == 1) %>%
nrow()
r_exp_2 <- select(data, r_exp) %>%
filter(r_exp == 2) %>%
nrow()
r_exp_3 <- select(data, r_exp) %>%
filter(r_exp == 3) %>%
nrow()
data <- read.csv(file = "data/intro_survey.csv", stringsAsFactors = FALSE)
data <- read.csv(file = "data/intro_survey.csv", stringsAsFactors = FALSE)
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = r_exp))
library("dplyr")
library("httr")
library("jsonlite")
library("rmarkdown")
library("knitr")
library("ggplot2")
library("tidyr")
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups))
program_coffee_data <- select(data, programming_exp, coffee_cups)
View(program_coffee_data)
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)) +
geom_point(mapping = aes(x = programming_exp, y = coffee_cups))
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups))
ggplot(data = data) +
geom_point(mapping = aes(x = programming_exp, y = coffee_cups, color = r_exp))
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups))
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups, color = r_exp)
ggplot(data = data) +
geom_bar(mapping = aes(x = programming_exp, y = coffee_cups, color = r_exp))
ggplot(data = data) +
geom_bar(mapping = aes(x = programming_exp, y = coffee_cups))
ggplot(data = data) +
geom_bar(mapping = aes(x = programming_exp))
program_os_data <- select(data, programming_exp, os)
View(program_os_data)
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups))
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups))
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)) +
xlab("Programming Experience") +
ylab(Coffee Cups Consumed)
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)) +
xlab("Programming Experience") +
ylab("Coffee Cups Consumed")
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)) +
xlab("Programming Experience") +
ylab("Coffee Cups Consumed") +
ggtitle("Programming Experience vs. Coffee Intake", subtitle = NULL)
program_coffee_graph <- ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)) +
xlab("Programming Experience") +
ylab("Coffee Cups Consumed") +
ggtitle("Programming Experience vs. Coffee Intake", subtitle = NULL)
ggplot(data = data) +
geom_point(mapping = aes(x = programming_exp, y = os))
program_os_data <- select(data, programming_exp, os) %>%
arrange(os)
View(program_os_data)
program_os_data <- select(data, programming_exp, os) %>%
arrange(os) %>%
filter(os == "Windows" | os == "Mac OS X")
View(program_os_data)
windows_os <- program_os_data %>%
filter(os == "Windows")
windows_os <- program_os_data %>%
filter(os == "Mac OS X")
windows_os <- program_os_data %>%
filter(os == "Windows")
mac_os <- program_os_data %>%
filter(os == "Mac OS X")
View(windows_os)
colMeans(windows_os$programming_exp)
colMeans(windows_os)
is.numeric(windows_os$programming_exp)
colMeans(windows_os$programming_exp)
View(windows_os$programming_exp)
ggplot(data = program_os_data) +
geom_bar(mapping = aes(x = os))
ggplot(data = program_os_data) +
geom_bar(mapping = aes(x = os)) +
facet_wrap(~programming_exp)
windows_data <- program_os_data %>%
filter(os == "Windows")
summarize(windows_data, mean = mean(windows_data$programming_exp))
summarize(windows_data, mean = mean(windows_data$programming_exp))
summarize(mac_data, mean = mean(mac_data$programming_exp))
mac_data <- program_os_data %>%
filter(os == "Mac OS X")
summarize(mac_data, mean = mean(mac_data$programming_exp))
mac_vs_windows_exp <- data.frame()
mac_vs_windows_exp$mac <- summarize(mac_data, mean = mean(mac_data$programming_exp))
mac_vs_windows_exp$windows <- summarize(windows_data, mean = mean(windows_data$programming_exp))
mac_vs_windows_exp <- data.frame()
is.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp))
)
mac_vs_windows_exp <- data.frame()
mac_vs_windows_exp$mac <- as.numeric(summarize(mac_data, mean = mean(mac_data$programming_exp)))
mac_vs_windows_exp$windows <- as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp)))
View(summarize(windows_data, mean = mean(windows_data$programming_exp))
)
as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp))
)
is.numeric(as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp))
))
mac_vs_windows_exp$windows <- as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp)))
mac_vs_windows_exp$os <- as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp)))
mac_vs_windows_exp <- data.frame()
View(mac_vs_windows_exp)
mac_vs_windows_exp$os <- c("Windows", "Mac")
mac_vs_windows_exp$os <- 5
avg_program_exp <- c(as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp))),
summarize(mac_data, mean = mean(mac_data$programming_exp)))
avg_program_exp
mac_vs_windows_exp <- data.frame(OS = c("Windows", "Mac"), Avg_Programming_exp = avg_program_exp)
View(mac_vs_windows_exp)
mac_vs_windows_exp <- data.frame(OS = c("Windows", "Mac"), Avg_Programming_exp =
c(as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp))),
summarize(mac_data, mean = mean(mac_data$programming_exp))))
View(mac_vs_windows_exp)
as.numeric(summarize(mac_data, mean = mean(mac_data$programming_exp))))
as.numeric(summarize(mac_data, mean = mean(mac_data$programming_exp)))
mac_vs_windows_exp <- data.frame(OS = c("Windows", "Mac"), Avg_Programming_exp =
mac_vs_windows_exp <- data.frame(OS = c("Windows", "Mac"), Avg_Programming_exp =
mac_vs_windows_exp <- data.frame(OS = c("Windows", "Mac"), Avg_Programming_exp =
as.numeric(summarize(mac_data, mean = mean(mac_data$programming_exp))))
mac_vs_windows_exp <- data.frame(OS = c("Windows", "Mac"), Avg_Programming_exp =
c(as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp))), as.numeric(summarize(mac_data, mean = mean(mac_data$programming_exp)))))
mac_vs_windows_exp <- data.frame(OS = c("Windows", "Mac"), Avg_Programming_exp =
c(as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp))), as.numeric(summarize(mac_data, mean = mean(mac_data$programming_exp)))))
mac_vs_windows_exp <- data.frame(OS = c("Windows", "Mac"), Avg_Programming_exp =
c(as.numeric(summarize(windows_data, mean = mean(windows_data$programming_exp))), as.numeric(summarize(mac_data, mean = mean(mac_data$programming_exp)))))
View(mac_vs_windows_exp)
ggplot(data = program_os_data) +
geom_count(aes(x = programming_exp, y = coffee_cups)) +
facet_wrap(~os)
ggplot(data = program_os_data) +
geom_count(aes(x = programming_exp, y = coffee_cups)) +
facet_wrap(~os)
program_os_data <- select(data, programming_exp, os, coffee_cups) %>%
arrange(os) %>%
filter(os == "Windows" | os == "Mac OS X")
program_coffee_graph <- ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)) +
xlab("Programming Experience") +
ylab("Coffee Cups Consumed") +
ggtitle("Programming Experience vs. Coffee Intake", subtitle = NULL)
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)) +
xlab("Programming Experience") +
ylab("Coffee Cups Consumed") +
ggtitle("Programming Experience vs. Coffee Intake", subtitle = NULL)
ggplot(data = data) +
geom_point(mapping = aes(x = programming_exp, y = os))
program_os_data <- select(data, programming_exp, os, coffee_cups) %>%
arrange(os) %>%
filter(os == "Windows" | os == "Mac OS X")
ggplot(data = program_os_data) +
geom_count(aes(x = programming_exp, y = coffee_cups)) +
facet_wrap(~os)
ggplot(data = program_os_data) +
geom_count(aes(x = programming_exp, y = coffee_cups, color = coffee_cups)) +
facet_wrap(~os) +
xlab("Programming Experience") +
ylab("Cups of Coffee Consumed Weekly") +
ggtitle("Programming Experience vs Coffee Intake among Mac/Windows Users")
ggplot(data = program_os_data) +
geom_count(aes(x = programming_exp, y = coffee_cups)) +
facet_wrap(~os) +
xlab("Programming Experience") +
ylab("Cups of Coffee Consumed Weekly") +
ggtitle("Programming Experience vs Coffee Intake among Mac/Windows Users")
ggplot(data = program_os_data) +
geom_count(aes(x = programming_exp, y = coffee_cups)) +
facet_wrap(~os) +
xlab("Programming Experience") +
ylab("Cups of Coffee Consumed Weekly") +
ggtitle("Programming Experience vs Coffee Intake among Mac/Windows Users")
ggplot(data = data) +
geom_smooth(mapping = aes(x = programming_exp, y = coffee_cups)) +
xlab("Programming Experience") +
ylab("Coffee Cups Consumed") +
ggtitle("Programming Experience vs. Coffee Intake", subtitle = NULL)
as.numeric(summarize(program_coffee_data, mean = mean(program_coffee_data %>% filter(programming_exp == 1))))
as.numeric(summarize(program_coffee_data, mean = mean(program_coffee_data %>% filter(programming_exp == 1) %>% select(coffee_cups))))
program_coffee_data %>%
filter(programming_exp == 1) %>%
select(coffee_cups)
mean(program_coffee_data %>%
filter(programming_exp == 1) %>%
select(coffee_cups))
colMeans(program_coffee_data %>%
filter(programming_exp == 1) %>%
select(coffee_cups))
colMeans(program_coffee_data %>%
filter(programming_exp == 1) %>%
select(coffee_cups))
ggplot(data = program_os_data) +
geom_count(aes(x = programming_exp, y = coffee_cups)) +
facet_wrap(~os) +
xlab("Programming Experience") +
ylab("Cups of Coffee Consumed Weekly") +
ggtitle("Programming Experience vs Coffee Intake among Mac/Windows Users", subtitle = NULL)
ggplot(data = program_os_data) +
geom_bar(mapping = aes(x = os)) +
facet_wrap(~programming_exp)
setwd("~/Desktop/a7-collaboration-raylzhao")
View(intro_survey)
library("dplyr")
library("httr")
library("jsonlite")
library("rmarkdown")
library("knitr")
library("ggplot2")
library("tidyr")
intro_survey <- read.csv("./data/intro_survey.csv", stringsAsFactors = FALSE)
#What portion of the respondents had programming experience
programming_exp <- ggplot(data = intro_survey) +
geom_bar(mapping = aes(x = programming_exp)) +
labs(title = "Respondents who have had programming experience",
x = "Programming Experience",
y = "Number of Students")
#What level of programming experience does experience with r language?
experience_info <- gather(intro_survey,
key = experience,
value = num_of_students,
cli_exp,
vcs_exp,
md_exp,
r_exp,
web_exp)
exp_diff <- ggplot(data = intro_survey, aes(x = experience, y = num_of_students, fill = experience)) +
geom_bar(stat = "identity") +
facet_wrap(~programming_exp) +
labs(title = "Programming Experience in Comparison to Different Languages",
x = "Different Languages",
y = "Number of Students")
View(intro_sur)
View(intro_survey)
View(intro_survey)
setwd("~/Desktop/a7-collaboration-raylzhao")
library("shiny")
library("dplyr")
library("ggplot2")
library("tidyr")
library("maps")
library("leaflet")
country_map <- map_data("world")
data <- read.csv(file = "2016.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/final-project-sear")
data <- read.csv(file = "2016.csv", stringsAsFactors = FALSE)
hdi <- read.csv(file = "hdi_data.csv", stringsAsFactors = FALSE)
hdi <- hdi %>%
select(Country, X2015)
colnames(hdi) <- c("region", "X2015")
hdi_map_data <- merge(country_map, hdi)
View(hdi_map_data)
hdi_map_data <- merge(country_map, hdi, by = c("region" = "region"))
hdi <- hdi %>%
select(Country, X2015)
colnames(hdi) <- c("region", "X2015")
hdi <- read.csv(file = "hdi_data.csv", stringsAsFactors = FALSE)
hdi <- hdi %>%
select(Country, X2015)
hdi_map_data <- merge(country_map, hdi, by = c("region" = "Country"))
hdi <- read.csv(file = "hdi_data.csv", stringsAsFactors = FALSE)
hdi <- hdi %>%
select(Country, X2015)
hdi_map_data <- merge(country_map, hdi, by = c("region" = "Country"))
hdi_map_data <- left_join(country_map, hdi, by = c("region" = "Country"))
View(hdi_map_data)
